#   SAP: Register BOM
#   Install and configure Database on ASM.
#   Install Oracle Database
#   Creates the database orcl and shuts it down.
#   Updates SBP patches for database and GRID infrastructure.
# Default value of rdbms compatiable is 10.1.0.0 however for SAP installation it needs a minimum value of 11.2.0.2.
# SAP Note 1739274 - Database Parameter COMPATIBLE
# SAP Note 1773593 - CREATE DATABASE  on ASM Fails with ORA-15204



---

- name:  
  ansible.builtin.set_fact:
    dir_params:                   "{{ target_media_location }}/.params"


- name:                                Load the disk configuration settings
  ansible.builtin.include_vars:        disks_config_asm.yml


- name:     "Create run MOPatch directory"
  ansible.builtin.file:
    path:   /oracle/stage/{{anydb_release}}/grid_home/MOPatch
    state:  directory
    owner: oracle
    group: oinstall

#   Oracle DB install: Response file
- name:                               "SAP Oracle ASM: deploy Database install response file"
  ansible.builtin.template:
    src:                              ORACLE_{{ anydb_release }}c_00_asm_db_v1_install.rsp.j2
    dest:                             "/etc/sap_deployment_automation/oracle/ORACLE_{{ anydb_release }}c_00_asm_db_{{ ansible_hostname }}_{{ anydb_sid }}_install.rsp"
    mode:                             0644
    force:                            true


#STEP1 Unzip the Oracle  Software
# Running the standard SAP installer to extract the files to /oracle/<sid>/19.0.0
- name:               "Unzip the Oracle Software"
  become:             yes
  become_user:        oracle
  ansible.builtin.shell: |
                      set -o errexit
                      ./RUNINSTALLER -ohextract -silent |tee -a /oracle/installlogs/oraextract.log
                      ln -s /oracle/{{ anydb_sid }}/{{ anydb_version }} /oracle/{{ anydb_sid }}/{{ anydb_release }}
                      touch /etc/sap_deployment_automation/oracle/oraextract.txt
  register:           swinstaller_results
  failed_when:        swinstaller_results.rc >= 2   
  environment:
    DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
  args:
    chdir:             "/usr/sap/install/oraserver/LINUX_X86_64/db_home/SAP"
    creates:           /etc/sap_deployment_automation/oracle/oraextract.txt


#STEP2 RUN THE INSTALLATION - EXECUTE.

- name:               "Execute runInstaller"
  become:             yes
  become_user:        oracle
  ansible.builtin.shell: |
                      set -o errexit
                      ./runInstaller -silent -responseFile /etc/sap_deployment_automation/oracle/ORACLE_{{ anydb_release }}c_00_asm_db_{{ ansible_hostname }}_{{ anydb_sid }}_install.rsp |tee -a /oracle/installlogs/dbinstall.log
  register:           dbinstaller_results
  environment:
    DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
  args:       
    executable:        /bin/csh
    chdir:            "/oracle/{{ anydb_sid }}/{{ anydb_version }}"
    creates:           /etc/sap_deployment_automation/oracle/dbinstall.txt

- name:            "create after a sucessfull install"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/dbinstall.txt"
    state:             touch
  


# #STEP3.1 POST PROCESSING - RUN ROOT SCRIPT.


- name:           "Oracle Post Processing - Run root.sh"                
  become:         yes
  become_user:    root
  ansible.builtin.shell: |   
                     /oracle/{{ anydb_sid }}/{{ anydb_version }}/root.sh                                                    
  register: rootscript_results
  args:
    executable:       /bin/csh
    creates:          /etc/sap_deployment_automation/oracle/dbrootscripstexecuted.txt

- name:            "creates after a sucessfull script execution"
  ansible.builtin.shell: |                    
                      touch /etc/sap_deployment_automation/oracle/dbrootscripstexecuted.txt
                      chmod 6751 /oracle/stage/{{anydb_release}}/grid_home/bin/oracle 


#STEP3.1 POST PROCESSING - Execute DB configtools.
- name:               "Execute ASM Configtools"
  become:             yes
  become_user:        oracle
  ansible.builtin.shell: |
                      set -o errexit
                      chmod 6751 /oracle/stage/{{anydb_release}}/grid_home/bin/oracle   
                      /oracle/{{ anydb_sid }}/{{ anydb_version }}/runInstaller -executeConfigTools -silent -responseFile /etc/sap_deployment_automation/oracle/ORACLE_{{ anydb_release }}c_00_asm_db_{{ ansible_hostname }}_{{ anydb_sid }}_install.rsp |tee -a /oracle/installlogs/dbconfigtoolsinstall.log
  register:           dbtoolsinstaller_results
  #failed_when:        gridinstaller_results.rc >= 2              #installer returns rc=1 (exited with warning) by default when run is silent mode as the oratab file is created only after running the root.sh
  environment:
    DB_SID:                       "{{ anydb_sid }}"
    CV_ASSUME_DISTID:             OL7
  args:       
    executable:        /bin/csh
    chdir:            "/oracle/{{ anydb_sid }}/{{ anydb_version }}"
    creates:           /etc/sap_deployment_automation/oracle/dbtoolsinstall.txt

- name:            "create after a sucessfull install"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/dbtoolsinstall.txt"
    state:             touch
  
# - name: "FAIL Here"
#   fail:
#     msg: Check if the crs and ASM database are stopped or not


# # Stop Database for SBP Patching
- name:           "Stop ORCL Database"                
  become:         yes
  become_user:    oracle
  ansible.builtin.shell: |   
                     ./srvctl stop database -db orcl -f |tee /oracle/installlogs/dbstop.log
  register: dbstop_results
  environment:
    #DB_SID:                       "{{anydb_sid}}"
    #RDBMS:            /oracle/{{anydb_sid}}/{{anydb_release}}
  failed_when:        dbstop_results.rc >= 3 
  args:
    chdir:            /oracle/stage/{{anydb_release}}/grid_home/bin
    creates:          /etc/sap_deployment_automation/oracle/dbstopped.txt

- name:            "creates after a sucessfull DB Stop"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/dbstopped.txt"
    state:             touch



#STEP 4.1 SBP Patching for Oracle.

- name:           "Oracle Post Processing - SBP Patching"                
  become:         yes
  become_user:    "oracle"
  ansible.builtin.shell: |   
                     set -o errexit 
                     mv  /oracle/{{anydb_sid}}/{{anydb_version}}/OPatch   /oracle/{{anydb_sid}}/{{anydb_version}}/OPatch.bck 
                     cp -R OPATCH/OPatch  /oracle/{{anydb_sid}}/{{anydb_version}}/.
                     cp -R SAPSBP/SBP_191200210720_202108/MOPatch  /oracle/{{anydb_sid}}/{{anydb_version}}/.
                     $IHRDBMS/MOPatch/mopatch.sh -v -s /usr/sap/install/SBP/SAP19P_2108-70004508.ZIP |tee -a /oracle/installlogs/sbp.log
  register: sbpscript_results
  environment:
    #DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
    IHRDBMS:                      /oracle/{{anydb_sid}}/{{anydb_version}}
    ORACLE_HOME:                  /oracle/{{anydb_sid}}/{{anydb_version}}
    RDBMS:                       /oracle/{{anydb_sid}}/{{anydb_release}}
  failed_when:        sbpscript_results.rc >= 2 
  args:
    executable:       /bin/csh
    chdir:            "/usr/sap/install/SBP/"
    creates:          /etc/sap_deployment_automation/oracle/sbpinstalled.txt

- name:            "creates after a sucessfull script execution"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/sbpinstalled.txt"
    state:             touch

#STEP 4.2 SBP Patching for Oracle GRID.
#STEP 4.2.1 SBP Patching for Oracle GRID.
- name:            "Prep for GRID SBP Patching"
  ansible.builtin.shell: |                    
                      cp -rp /oracle/stage/{{anydb_release}}/grid_home /oracle/stage/{{anydb_release}}/grid_home.bck
                      /oracle/stage/{{anydb_release}}/grid_home/crs/install/roothas.sh -prepatch |tee /oracle/installlogs/pre-patchcmd.log
                      cp -R /usr/sap/install/SBP/SAPSBP/SBP_191200210720_202108/MOPatch  /oracle/stage/{{anydb_release}}/grid_home/.
                      chown -R oracle:oinstall  /oracle/stage/{{anydb_release}}/grid_home/MOPatch            
  args:
    creates:          /etc/sap_deployment_automation/oracle/gridpreinstall.txt

- name:            "creates after a sucessfull pre install"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/gridpreinstall.txt"
    state:             touch
  

#STEP 4.2.2 SBP Patching for Oracle GRID.
- name:           "Oracle Post Processing - GRID SBP Patching Execution"                
  become:         yes
  become_user:    "oracle"
  ansible.builtin.shell: |   
                     set -o errexit
                     mv  /oracle/stage/{{anydb_release}}/grid_home/OPatch   /oracle/stage/{{anydb_release}}/grid_home/OPatch.bck
                     cp -R OPATCH/OPatch  /oracle/stage/{{anydb_release}}/grid_home/.
                     chmod 6751 /oracle/stage/{{anydb_release}}/grid_home/bin/oracle
                     $OHGRID/MOPatch/mopatch.sh -v -s /usr/sap/install/SBP/SGR19P_2108-70004550.ZIP |tee -a /oracle/installlogs/sbpgrid.log
  register: sbpgscript_results
  environment:
    OHGRID:                      /oracle/stage/{{anydb_release}}/grid_home
    ORACLE_HOME:                 /oracle/stage/{{anydb_release}}/grid_home
  args:
    executable:       /bin/csh
    chdir:            "/usr/sap/install/SBP/"
    creates:          /etc/sap_deployment_automation/oracle/sbpginstalled.txt


- name:            "creates after a sucessfull script execution"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/sbpginstalled.txt"
    state:             touch
  

#STEP 4.2.3 Post-Processing SBP Patching for Oracle GRID.
#SAP Note 2893317 - ORA-12547:  TNS:lost contact during SWPM system copy import -NetWeaver
# Run the post install script for GRID SBP patching to start the Oracle Cluster service manager, ASMCA and relevant toolset.

- name:           "Oracle Post Processing - GRID SBP GRID Patching Post-Processing"                
  become:         yes
  become_user:    root
  ansible.builtin.shell: |   
                     set -o errexit
                     /oracle/stage/{{ anydb_release }}/grid_home/rdbms/install/rootadd_rdbms.sh
                     /oracle/stage/{{ anydb_release }}/grid_home/crs/install/roothas.sh -postpatch |tee /oracle/installlogs/post-processing.log
                     chown oracle:oinstall /oracle/{{ anydb_sid}}/{{ anydb_version }}/bin/oracle
                     chmod 6751  /oracle/{{ anydb_sid}}/{{ anydb_version }}/bin/oracle
                     chmod 755 /opt/oracle
  register: sbppostpro_results 
  args:
    chdir:            /oracle/stage/{{ anydb_release }}/grid_home/
    creates:          /etc/sap_deployment_automation/oracle/sbpgpostprocess.txt

- name:            "creates after a sucessfull change"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/sbpgpostprocess.txt"
    state:             touch
  
                     
# Wait for the ASM DB to come up and running before chnaging the DISK Attributes.
- name: Sleep for 30 seconds and continue with play
  wait_for:
    timeout: 30
  

#STEP5 POST PROCESSING - Change RDBMS Compatiable Setting.
# #Update Compatiable for DATA, ARCH and RECO disk groups using ASMCA.
# Default value of rdbms compatiable is 10.1.0.0 however for SAP installation it needs a minimum value of 11.2.0.2.
# SAP Note 1739274 - Database Parameter COMPATIBLE
# SAP Note 1773593 - CREATE DATABASE  on ASM Fails with ORA-15204

- name:           "Update ASM Disk groups ARCH and RECO for DBLOAD"                
  become:         yes
  become_user:    oracle
  ansible.builtin.shell: |   
                     set -o errexit
                     /oracle/stage/{{ anydb_release }}/grid_home/bin/srvctl start LISTENER
                     /oracle/stage/{{ anydb_release }}/grid_home/bin/asmca -silent -editDiskGroupAttributes -diskGroupName DATA -attribute compatible.rdbms={{ anydb_version }}
                     /oracle/stage/{{ anydb_release }}/grid_home/bin/asmca -silent -editDiskGroupAttributes -diskGroupName ARCH -attribute compatible.rdbms={{ anydb_version }}
                     /oracle/stage/{{ anydb_release }}/grid_home/bin/asmca -silent -editDiskGroupAttributes -diskGroupName RECO -attribute compatible.rdbms={{ anydb_version }}                                     
  register: diskgroupcreation_results
  environment:
    DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
  args:
    executable:       /bin/csh
    chdir:            /oracle/stage/{{ anydb_release }}/grid_home/bin
    creates:          /etc/sap_deployment_automation/oracle/diskgroupupdated.txt

- name:            "creates after a sucessfull change"
  ansible.builtin.file:
    path:              "/etc/sap_deployment_automation/oracle/diskgroupupdated.txt"
    state:             touch
  

# #   0x) remove hidden directory for parameter files
# - name:     "remove hidden directory"
#   ansible.builtin.file:
#     path:   "{{ item.path }}"
#     state:  "{{ item.state }}"
#     mode:   "{{ item.mode }}"
#   loop:
#     - { state: 'absent',    mode: '0755', path: '{{ dir_params }}' }

...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
